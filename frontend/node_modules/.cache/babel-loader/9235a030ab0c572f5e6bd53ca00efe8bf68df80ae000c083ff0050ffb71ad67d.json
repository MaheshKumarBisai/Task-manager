{"ast":null,"code":"// import React, { createContext, useState, useContext, useEffect } from 'react';\n// import axios from 'axios';\n// import { toast } from 'react-toastify';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => {\n//   const context = useContext(AuthContext);\n//   if (!context) {\n//     throw new Error('useAuth must be used within an AuthProvider');\n//   }\n//   return context;\n// };\n\n// // Configure axios defaults\n// axios.defaults.baseURL = process.env.REACT_APP_API_URL || '';\n// axios.defaults.headers.common['Content-Type'] = 'application/json';\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     // Check for existing authentication on app load\n//     const savedUser = localStorage.getItem('taskflow_user');\n//     const savedToken = localStorage.getItem('taskflow_token');\n\n//     if (savedUser && savedToken) {\n//       try {\n//         const parsedUser = JSON.parse(savedUser);\n//         setUser(parsedUser);\n//         axios.defaults.headers.common['Authorization'] = `Bearer ${savedToken}`;\n//       } catch (error) {\n//         console.error('Error parsing saved user:', error);\n//         localStorage.removeItem('taskflow_user');\n//         localStorage.removeItem('taskflow_token');\n//       }\n//     }\n//     setLoading(false);\n//   }, []);\n\n//   const login = async (username, password) => {\n//     try {\n//       const response = await axios.post('/api/auth/login', {\n//         username: username.trim(),\n//         password\n//       });\n\n//       if (response.data.success) {\n//         const { user, token } = response.data;\n\n//         // Save user data and token\n//         setUser(user);\n//         localStorage.setItem('taskflow_user', JSON.stringify(user));\n//         localStorage.setItem('taskflow_token', token);\n//         axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n//         return { success: true };\n//       } else {\n//         return { \n//           success: false, \n//           message: response.data.message || 'Login failed' \n//         };\n//       }\n//     } catch (error) {\n//       console.error('Login error:', error);\n//       return { \n//         success: false, \n//         message: error.response?.data?.message || 'Network error. Please try again.' \n//       };\n//     }\n//   };\n\n//   const register = async (userData) => {\n//     try {\n//       // Validate input data\n//       if (!userData.username || !userData.email || !userData.password || !userData.name) {\n//         return {\n//           success: false,\n//           message: 'All fields are required'\n//         };\n//       }\n\n//       const response = await axios.post('/api/auth/register', {\n//         username: userData.username.trim(),\n//         email: userData.email.trim(),\n//         name: userData.name.trim(),\n//         password: userData.password\n//       });\n\n//       if (response.data.success) {\n//         const { user, token } = response.data;\n\n//         // Save user data and token\n//         setUser(user);\n//         localStorage.setItem('taskflow_user', JSON.stringify(user));\n//         localStorage.setItem('taskflow_token', token);\n//         axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n//         return { success: true };\n//       } else {\n//         return { \n//           success: false, \n//           message: response.data.message || 'Registration failed' \n//         };\n//       }\n//     } catch (error) {\n//       console.error('Registration error:', error);\n//       return { \n//         success: false, \n//         message: error.response?.data?.message || 'Network error. Please try again.' \n//       };\n//     }\n//   };\n\n//   const logout = () => {\n//     setUser(null);\n//     localStorage.removeItem('taskflow_user');\n//     localStorage.removeItem('taskflow_token');\n//     delete axios.defaults.headers.common['Authorization'];\n//     toast.success('Logged out successfully');\n//   };\n\n//   const updateUser = (updatedUserData) => {\n//     const updatedUser = { ...user, ...updatedUserData };\n//     setUser(updatedUser);\n//     localStorage.setItem('taskflow_user', JSON.stringify(updatedUser));\n//   };\n\n//   const value = {\n//     user,\n//     login,\n//     register,\n//     logout,\n//     updateUser,\n//     loading\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {!loading && children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthContext;","map":{"version":3,"names":[],"sources":["/Users/mac/Desktop/take/frontend/src/context/AuthContext.js"],"sourcesContent":["// import React, { createContext, useState, useContext, useEffect } from 'react';\n// import axios from 'axios';\n// import { toast } from 'react-toastify';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => {\n//   const context = useContext(AuthContext);\n//   if (!context) {\n//     throw new Error('useAuth must be used within an AuthProvider');\n//   }\n//   return context;\n// };\n\n// // Configure axios defaults\n// axios.defaults.baseURL = process.env.REACT_APP_API_URL || '';\n// axios.defaults.headers.common['Content-Type'] = 'application/json';\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     // Check for existing authentication on app load\n//     const savedUser = localStorage.getItem('taskflow_user');\n//     const savedToken = localStorage.getItem('taskflow_token');\n\n//     if (savedUser && savedToken) {\n//       try {\n//         const parsedUser = JSON.parse(savedUser);\n//         setUser(parsedUser);\n//         axios.defaults.headers.common['Authorization'] = `Bearer ${savedToken}`;\n//       } catch (error) {\n//         console.error('Error parsing saved user:', error);\n//         localStorage.removeItem('taskflow_user');\n//         localStorage.removeItem('taskflow_token');\n//       }\n//     }\n//     setLoading(false);\n//   }, []);\n\n//   const login = async (username, password) => {\n//     try {\n//       const response = await axios.post('/api/auth/login', {\n//         username: username.trim(),\n//         password\n//       });\n\n//       if (response.data.success) {\n//         const { user, token } = response.data;\n\n//         // Save user data and token\n//         setUser(user);\n//         localStorage.setItem('taskflow_user', JSON.stringify(user));\n//         localStorage.setItem('taskflow_token', token);\n//         axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n//         return { success: true };\n//       } else {\n//         return { \n//           success: false, \n//           message: response.data.message || 'Login failed' \n//         };\n//       }\n//     } catch (error) {\n//       console.error('Login error:', error);\n//       return { \n//         success: false, \n//         message: error.response?.data?.message || 'Network error. Please try again.' \n//       };\n//     }\n//   };\n\n//   const register = async (userData) => {\n//     try {\n//       // Validate input data\n//       if (!userData.username || !userData.email || !userData.password || !userData.name) {\n//         return {\n//           success: false,\n//           message: 'All fields are required'\n//         };\n//       }\n\n//       const response = await axios.post('/api/auth/register', {\n//         username: userData.username.trim(),\n//         email: userData.email.trim(),\n//         name: userData.name.trim(),\n//         password: userData.password\n//       });\n\n//       if (response.data.success) {\n//         const { user, token } = response.data;\n\n//         // Save user data and token\n//         setUser(user);\n//         localStorage.setItem('taskflow_user', JSON.stringify(user));\n//         localStorage.setItem('taskflow_token', token);\n//         axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n//         return { success: true };\n//       } else {\n//         return { \n//           success: false, \n//           message: response.data.message || 'Registration failed' \n//         };\n//       }\n//     } catch (error) {\n//       console.error('Registration error:', error);\n//       return { \n//         success: false, \n//         message: error.response?.data?.message || 'Network error. Please try again.' \n//       };\n//     }\n//   };\n\n//   const logout = () => {\n//     setUser(null);\n//     localStorage.removeItem('taskflow_user');\n//     localStorage.removeItem('taskflow_token');\n//     delete axios.defaults.headers.common['Authorization'];\n//     toast.success('Logged out successfully');\n//   };\n\n//   const updateUser = (updatedUserData) => {\n//     const updatedUser = { ...user, ...updatedUserData };\n//     setUser(updatedUser);\n//     localStorage.setItem('taskflow_user', JSON.stringify(updatedUser));\n//   };\n\n//   const value = {\n//     user,\n//     login,\n//     register,\n//     logout,\n//     updateUser,\n//     loading\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {!loading && children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthContext;"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}