{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/take/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useState, useContext, useEffect } from 'react';\n// import axios from 'axios';\n// import { toast } from 'react-toastify';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => {\n//   const context = useContext(AuthContext);\n//   if (!context) {\n//     throw new Error('useAuth must be used within an AuthProvider');\n//   }\n//   return context;\n// };\n\n// // Configure axios defaults\n// axios.defaults.baseURL = process.env.REACT_APP_API_URL || '';\n// axios.defaults.headers.common['Content-Type'] = 'application/json';\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     // Check for existing authentication on app load\n//     const savedUser = localStorage.getItem('taskflow_user');\n//     const savedToken = localStorage.getItem('taskflow_token');\n\n//     if (savedUser && savedToken) {\n//       try {\n//         const parsedUser = JSON.parse(savedUser);\n//         setUser(parsedUser);\n//         axios.defaults.headers.common['Authorization'] = `Bearer ${savedToken}`;\n//       } catch (error) {\n//         console.error('Error parsing saved user:', error);\n//         localStorage.removeItem('taskflow_user');\n//         localStorage.removeItem('taskflow_token');\n//       }\n//     }\n//     setLoading(false);\n//   }, []);\n\n//   const login = async (username, password) => {\n//     try {\n//       const response = await axios.post('/api/auth/login', {\n//         username: username.trim(),\n//         password\n//       });\n\n//       if (response.data.success) {\n//         const { user, token } = response.data;\n\n//         // Save user data and token\n//         setUser(user);\n//         localStorage.setItem('taskflow_user', JSON.stringify(user));\n//         localStorage.setItem('taskflow_token', token);\n//         axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n//         return { success: true };\n//       } else {\n//         return { \n//           success: false, \n//           message: response.data.message || 'Login failed' \n//         };\n//       }\n//     } catch (error) {\n//       console.error('Login error:', error);\n//       return { \n//         success: false, \n//         message: error.response?.data?.message || 'Network error. Please try again.' \n//       };\n//     }\n//   };\n\n//   const register = async (userData) => {\n//     try {\n//       // Validate input data\n//       if (!userData.username || !userData.email || !userData.password || !userData.name) {\n//         return {\n//           success: false,\n//           message: 'All fields are required'\n//         };\n//       }\n\n//       const response = await axios.post('/api/auth/register', {\n//         username: userData.username.trim(),\n//         email: userData.email.trim(),\n//         name: userData.name.trim(),\n//         password: userData.password\n//       });\n\n//       if (response.data.success) {\n//         const { user, token } = response.data;\n\n//         // Save user data and token\n//         setUser(user);\n//         localStorage.setItem('taskflow_user', JSON.stringify(user));\n//         localStorage.setItem('taskflow_token', token);\n//         axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n//         return { success: true };\n//       } else {\n//         return { \n//           success: false, \n//           message: response.data.message || 'Registration failed' \n//         };\n//       }\n//     } catch (error) {\n//       console.error('Registration error:', error);\n//       return { \n//         success: false, \n//         message: error.response?.data?.message || 'Network error. Please try again.' \n//       };\n//     }\n//   };\n\n//   const logout = () => {\n//     setUser(null);\n//     localStorage.removeItem('taskflow_user');\n//     localStorage.removeItem('taskflow_token');\n//     delete axios.defaults.headers.common['Authorization'];\n//     toast.success('Logged out successfully');\n//   };\n\n//   const updateUser = (updatedUserData) => {\n//     const updatedUser = { ...user, ...updatedUserData };\n//     setUser(updatedUser);\n//     localStorage.setItem('taskflow_user', JSON.stringify(updatedUser));\n//   };\n\n//   const value = {\n//     user,\n//     login,\n//     register,\n//     logout,\n//     updateUser,\n//     loading\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {!loading && children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthContext;\n\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\naxios.defaults.headers.common['Content-Type'] = 'application/json';\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const savedUser = localStorage.getItem('taskflow_user');\n    const savedToken = localStorage.getItem('taskflow_token');\n    if (savedUser && savedToken) {\n      try {\n        const parsedUser = JSON.parse(savedUser);\n        setUser(parsedUser);\n        axios.defaults.headers.common['Authorization'] = `Bearer ${savedToken}`;\n      } catch (error) {\n        localStorage.removeItem('taskflow_user');\n        localStorage.removeItem('taskflow_token');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (username, password) => {\n    try {\n      const response = await axios.post('/api/auth/login', {\n        username: username.trim(),\n        password\n      });\n      if (response.data.success) {\n        const {\n          user,\n          token\n        } = response.data;\n        setUser(user);\n        localStorage.setItem('taskflow_user', JSON.stringify(user));\n        localStorage.setItem('taskflow_token', token);\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        success: false,\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed'\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('taskflow_user');\n    localStorage.removeItem('taskflow_token');\n    delete axios.defaults.headers.common['Authorization'];\n    toast.success('Logged out successfully');\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","defaults","headers","common","AuthProvider","children","_s2","user","setUser","loading","setLoading","savedUser","localStorage","getItem","savedToken","parsedUser","JSON","parse","error","removeItem","login","username","password","response","post","trim","data","success","token","setItem","stringify","_error$response","_error$response$data","message","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mac/Desktop/take/frontend/src/context/AuthContext.js"],"sourcesContent":["// import React, { createContext, useState, useContext, useEffect } from 'react';\n// import axios from 'axios';\n// import { toast } from 'react-toastify';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => {\n//   const context = useContext(AuthContext);\n//   if (!context) {\n//     throw new Error('useAuth must be used within an AuthProvider');\n//   }\n//   return context;\n// };\n\n// // Configure axios defaults\n// axios.defaults.baseURL = process.env.REACT_APP_API_URL || '';\n// axios.defaults.headers.common['Content-Type'] = 'application/json';\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     // Check for existing authentication on app load\n//     const savedUser = localStorage.getItem('taskflow_user');\n//     const savedToken = localStorage.getItem('taskflow_token');\n\n//     if (savedUser && savedToken) {\n//       try {\n//         const parsedUser = JSON.parse(savedUser);\n//         setUser(parsedUser);\n//         axios.defaults.headers.common['Authorization'] = `Bearer ${savedToken}`;\n//       } catch (error) {\n//         console.error('Error parsing saved user:', error);\n//         localStorage.removeItem('taskflow_user');\n//         localStorage.removeItem('taskflow_token');\n//       }\n//     }\n//     setLoading(false);\n//   }, []);\n\n//   const login = async (username, password) => {\n//     try {\n//       const response = await axios.post('/api/auth/login', {\n//         username: username.trim(),\n//         password\n//       });\n\n//       if (response.data.success) {\n//         const { user, token } = response.data;\n\n//         // Save user data and token\n//         setUser(user);\n//         localStorage.setItem('taskflow_user', JSON.stringify(user));\n//         localStorage.setItem('taskflow_token', token);\n//         axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n//         return { success: true };\n//       } else {\n//         return { \n//           success: false, \n//           message: response.data.message || 'Login failed' \n//         };\n//       }\n//     } catch (error) {\n//       console.error('Login error:', error);\n//       return { \n//         success: false, \n//         message: error.response?.data?.message || 'Network error. Please try again.' \n//       };\n//     }\n//   };\n\n//   const register = async (userData) => {\n//     try {\n//       // Validate input data\n//       if (!userData.username || !userData.email || !userData.password || !userData.name) {\n//         return {\n//           success: false,\n//           message: 'All fields are required'\n//         };\n//       }\n\n//       const response = await axios.post('/api/auth/register', {\n//         username: userData.username.trim(),\n//         email: userData.email.trim(),\n//         name: userData.name.trim(),\n//         password: userData.password\n//       });\n\n//       if (response.data.success) {\n//         const { user, token } = response.data;\n\n//         // Save user data and token\n//         setUser(user);\n//         localStorage.setItem('taskflow_user', JSON.stringify(user));\n//         localStorage.setItem('taskflow_token', token);\n//         axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n//         return { success: true };\n//       } else {\n//         return { \n//           success: false, \n//           message: response.data.message || 'Registration failed' \n//         };\n//       }\n//     } catch (error) {\n//       console.error('Registration error:', error);\n//       return { \n//         success: false, \n//         message: error.response?.data?.message || 'Network error. Please try again.' \n//       };\n//     }\n//   };\n\n//   const logout = () => {\n//     setUser(null);\n//     localStorage.removeItem('taskflow_user');\n//     localStorage.removeItem('taskflow_token');\n//     delete axios.defaults.headers.common['Authorization'];\n//     toast.success('Logged out successfully');\n//   };\n\n//   const updateUser = (updatedUserData) => {\n//     const updatedUser = { ...user, ...updatedUserData };\n//     setUser(updatedUser);\n//     localStorage.setItem('taskflow_user', JSON.stringify(updatedUser));\n//   };\n\n//   const value = {\n//     user,\n//     login,\n//     register,\n//     logout,\n//     updateUser,\n//     loading\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {!loading && children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthContext;\n\n\n\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\naxios.defaults.headers.common['Content-Type'] = 'application/json';\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const savedUser = localStorage.getItem('taskflow_user');\n    const savedToken = localStorage.getItem('taskflow_token');\n    \n    if (savedUser && savedToken) {\n      try {\n        const parsedUser = JSON.parse(savedUser);\n        setUser(parsedUser);\n        axios.defaults.headers.common['Authorization'] = `Bearer ${savedToken}`;\n      } catch (error) {\n        localStorage.removeItem('taskflow_user');\n        localStorage.removeItem('taskflow_token');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (username, password) => {\n    try {\n      const response = await axios.post('/api/auth/login', {\n        username: username.trim(),\n        password\n      });\n\n      if (response.data.success) {\n        const { user, token } = response.data;\n        setUser(user);\n        localStorage.setItem('taskflow_user', JSON.stringify(user));\n        localStorage.setItem('taskflow_token', token);\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        return { success: true };\n      }\n    } catch (error) {\n      return { \n        success: false, \n        message: error.response?.data?.message || 'Login failed' \n      };\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('taskflow_user');\n    localStorage.removeItem('taskflow_token');\n    delete axios.defaults.headers.common['Authorization'];\n    toast.success('Logged out successfully');\n  };\n\n  const value = { user, login, logout, loading };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMS,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGT,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpBL,KAAK,CAACS,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,cAAc,CAAC,GAAG,kBAAkB;AAElE,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}